'use strict';var _map=require('babel-runtime/core-js/map');var _map2=_interopRequireDefault(_map);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}module.exports={compareTwoStrings:compareTwoStrings,findBestMatch:findBestMatch};function compareTwoStrings(first,second){first=first.replace(/\s+/g,'');second=second.replace(/\s+/g,'');if(!first.length&&!second.length)return 1;// if both are empty strings
if(!first.length||!second.length)return 0;// if only one is empty string
if(first===second)return 1;// identical
if(first.length===1&&second.length===1)return 0;// both are 1-letter strings
if(first.length<2||second.length<2)return 0;// if either is a 1-letter string
var firstBigrams=new _map2.default;for(var i=0;i<first.length-1;i++){var bigram=first.substr(i,2);var count=firstBigrams.has(bigram)?firstBigrams.get(bigram)+1:1;firstBigrams.set(bigram,count)};var intersectionSize=0;for(var _i=0;_i<second.length-1;_i++){var _bigram=second.substr(_i,2);var _count=firstBigrams.has(_bigram)?firstBigrams.get(_bigram):0;if(_count>0){firstBigrams.set(_bigram,_count-1);intersectionSize++}}return 2*intersectionSize/(first.length+second.length-2)}function findBestMatch(mainString,targetStrings){if(!areArgsValid(mainString,targetStrings))throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');var ratings=[];var bestMatchIndex=0;for(var i=0;i<targetStrings.length;i++){var currentTargetString=targetStrings[i];var currentRating=compareTwoStrings(mainString,currentTargetString);ratings.push({target:currentTargetString,rating:currentRating});if(currentRating>ratings[bestMatchIndex].rating){bestMatchIndex=i}}var bestMatch=ratings[bestMatchIndex];return{ratings:ratings,bestMatch:bestMatch,bestMatchIndex:bestMatchIndex}}function flattenDeep(arr){return Array.isArray(arr)?arr.reduce(function(a,b){return a.concat(flattenDeep(b))},[]):[arr]}function areArgsValid(mainString,targetStrings){if(typeof mainString!=='string')return false;if(!Array.isArray(targetStrings))return false;if(!targetStrings.length)return false;if(targetStrings.find(function(s){return typeof s!=='string'}))return false;return true}function letterPairs(str){var pairs=[];for(var i=0,max=str.length-1;i<max;i++){pairs[i]=str.substring(i,i+2)}return pairs}function wordLetterPairs(str){var pairs=str.toUpperCase().split(' ').map(letterPairs);return flattenDeep(pairs)}

